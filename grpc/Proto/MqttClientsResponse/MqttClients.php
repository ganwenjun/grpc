<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/mqtt.proto

namespace Proto\MqttClientsResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>proto.MqttClientsResponse.MqttClients</code>
 */
class MqttClients extends \Google\Protobuf\Internal\Message
{
    /**
     *客户端标识符
     *
     * Generated from protobuf field <code>string clientid = 1;</code>
     */
    protected $clientid = '';
    /**
     *客户端的 IP 地址
     *
     * Generated from protobuf field <code>string ipAddress = 2;</code>
     */
    protected $ipAddress = '';
    /**
     *客户端是否处于连接状态
     *
     * Generated from protobuf field <code>bool connected = 3;</code>
     */
    protected $connected = false;
    /**
     *客户端连接时间，格式为 "YYYY-MM-DD HH:mm:ss"
     *
     * Generated from protobuf field <code>string connectedAt = 4;</code>
     */
    protected $connectedAt = '';
    /**
     *客户端离线时间，格式为 "YYYY-MM-DD HH:mm:ss"，此字段仅在 connected 为 false 时有效并被返回
     *
     * Generated from protobuf field <code>string disconnectedAt = 5;</code>
     */
    protected $disconnectedAt = '';
    /**
     *保持连接时间，单位：秒
     *
     * Generated from protobuf field <code>int32 keepalive = 6;</code>
     */
    protected $keepalive = 0;
    /**
     *指示客户端是否使用了全新的会话
     *
     * Generated from protobuf field <code>bool cleanStart = 7;</code>
     */
    protected $cleanStart = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $clientid
     *          客户端标识符
     *     @type string $ipAddress
     *          客户端的 IP 地址
     *     @type bool $connected
     *          客户端是否处于连接状态
     *     @type string $connectedAt
     *          客户端连接时间，格式为 "YYYY-MM-DD HH:mm:ss"
     *     @type string $disconnectedAt
     *          客户端离线时间，格式为 "YYYY-MM-DD HH:mm:ss"，此字段仅在 connected 为 false 时有效并被返回
     *     @type int $keepalive
     *          保持连接时间，单位：秒
     *     @type bool $cleanStart
     *          指示客户端是否使用了全新的会话
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Mqtt::initOnce();
        parent::__construct($data);
    }

    /**
     *客户端标识符
     *
     * Generated from protobuf field <code>string clientid = 1;</code>
     * @return string
     */
    public function getClientid()
    {
        return $this->clientid;
    }

    /**
     *客户端标识符
     *
     * Generated from protobuf field <code>string clientid = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setClientid($var)
    {
        GPBUtil::checkString($var, True);
        $this->clientid = $var;

        return $this;
    }

    /**
     *客户端的 IP 地址
     *
     * Generated from protobuf field <code>string ipAddress = 2;</code>
     * @return string
     */
    public function getIpAddress()
    {
        return $this->ipAddress;
    }

    /**
     *客户端的 IP 地址
     *
     * Generated from protobuf field <code>string ipAddress = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setIpAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->ipAddress = $var;

        return $this;
    }

    /**
     *客户端是否处于连接状态
     *
     * Generated from protobuf field <code>bool connected = 3;</code>
     * @return bool
     */
    public function getConnected()
    {
        return $this->connected;
    }

    /**
     *客户端是否处于连接状态
     *
     * Generated from protobuf field <code>bool connected = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setConnected($var)
    {
        GPBUtil::checkBool($var);
        $this->connected = $var;

        return $this;
    }

    /**
     *客户端连接时间，格式为 "YYYY-MM-DD HH:mm:ss"
     *
     * Generated from protobuf field <code>string connectedAt = 4;</code>
     * @return string
     */
    public function getConnectedAt()
    {
        return $this->connectedAt;
    }

    /**
     *客户端连接时间，格式为 "YYYY-MM-DD HH:mm:ss"
     *
     * Generated from protobuf field <code>string connectedAt = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setConnectedAt($var)
    {
        GPBUtil::checkString($var, True);
        $this->connectedAt = $var;

        return $this;
    }

    /**
     *客户端离线时间，格式为 "YYYY-MM-DD HH:mm:ss"，此字段仅在 connected 为 false 时有效并被返回
     *
     * Generated from protobuf field <code>string disconnectedAt = 5;</code>
     * @return string
     */
    public function getDisconnectedAt()
    {
        return $this->disconnectedAt;
    }

    /**
     *客户端离线时间，格式为 "YYYY-MM-DD HH:mm:ss"，此字段仅在 connected 为 false 时有效并被返回
     *
     * Generated from protobuf field <code>string disconnectedAt = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setDisconnectedAt($var)
    {
        GPBUtil::checkString($var, True);
        $this->disconnectedAt = $var;

        return $this;
    }

    /**
     *保持连接时间，单位：秒
     *
     * Generated from protobuf field <code>int32 keepalive = 6;</code>
     * @return int
     */
    public function getKeepalive()
    {
        return $this->keepalive;
    }

    /**
     *保持连接时间，单位：秒
     *
     * Generated from protobuf field <code>int32 keepalive = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setKeepalive($var)
    {
        GPBUtil::checkInt32($var);
        $this->keepalive = $var;

        return $this;
    }

    /**
     *指示客户端是否使用了全新的会话
     *
     * Generated from protobuf field <code>bool cleanStart = 7;</code>
     * @return bool
     */
    public function getCleanStart()
    {
        return $this->cleanStart;
    }

    /**
     *指示客户端是否使用了全新的会话
     *
     * Generated from protobuf field <code>bool cleanStart = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setCleanStart($var)
    {
        GPBUtil::checkBool($var);
        $this->cleanStart = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(MqttClients::class, \Proto\MqttClientsResponse_MqttClients::class);

